"""Configuration management for Empathetic framework."""
import os
from pathlib import Path
from typing import Any, Optional

import yaml
from dotenv import load_dotenv

# Load .env file from project root
env_path = Path(__file__).parent.parent / ".env"
load_dotenv(env_path)


class Config:
    """Central configuration for Empathetic framework."""

    def __init__(self):
        # API Keys
        self.openai_api_key = os.getenv("OPENAI_API_KEY", "")
        self.anthropic_api_key = os.getenv("ANTHROPIC_API_KEY", "")
        self.huggingface_api_key = os.getenv("HUGGINGFACE_API_KEY", "")

        # Default settings
        self.default_model = os.getenv("EMPATHETIC_DEFAULT_MODEL", "gpt-3.5-turbo")
        self.config_path = os.getenv("EMPATHETIC_CONFIG", "./empathetic.yaml")

        # API Server settings
        self.secret_key = os.getenv("SECRET_KEY", "dev-secret-key-change-in-production")
        self.database_url = os.getenv("DATABASE_URL", "sqlite:///./empathetic.db")
        self.debug = os.getenv("DEBUG", "false").lower() == "true"

        # Load YAML config if exists
        self._yaml_config = self._load_yaml_config()

    def _load_yaml_config(self) -> dict[str, Any]:
        """Load YAML configuration file."""
        config_path = Path(self.config_path)
        if config_path.exists():
            try:
                with open(config_path) as f:
                    return yaml.safe_load(f) or {}
            except Exception:
                return {}
        return {}

    def get_api_key(self, provider: str) -> Optional[str]:
        """Get API key for a provider."""
        provider = provider.lower()
        if provider == "openai":
            return self.openai_api_key
        elif provider == "anthropic":
            return self.anthropic_api_key
        elif provider == "huggingface":
            return self.huggingface_api_key
        return None

    def has_api_keys(self) -> bool:
        """Check if at least one API key is configured."""
        return bool(self.openai_api_key or self.anthropic_api_key or self.huggingface_api_key)

    def get_test_config(self, suite: str) -> dict[str, Any]:
        """Get configuration for a test suite."""
        if self._yaml_config and "test_suites" in self._yaml_config:
            return self._yaml_config["test_suites"].get(suite, {})
        return {}

    def get_scoring_config(self) -> dict[str, Any]:
        """Get scoring configuration."""
        if self._yaml_config and "scoring" in self._yaml_config:
            return self._yaml_config["scoring"]
        return {
            "weights": {
                "bias": 0.25,
                "alignment": 0.25,
                "fairness": 0.2,
                "safety": 0.2,
                "empathy": 0.1
            },
            "thresholds": {
                "pass": 0.9,
                "warning": 0.7
            }
        }

    def save_api_key(self, provider: str, api_key: str):
        """Save API key to .env file."""
        env_vars = {}

        # Read existing .env file
        if env_path.exists():
            with open(env_path) as f:
                for line in f:
                    line = line.strip()
                    if line and not line.startswith('#') and '=' in line:
                        key, value = line.split('=', 1)
                        env_vars[key] = value

        # Update the specific API key
        provider_key = f"{provider.upper()}_API_KEY"
        env_vars[provider_key] = api_key

        # Write back to .env
        with open(env_path, 'w') as f:
            f.write("# Empathetic AI Testing Framework Configuration\n")
            f.write("# Auto-generated by emp setup\n\n")

            for key, value in env_vars.items():
                f.write(f"{key}={value}\n")

        # Reload environment
        load_dotenv(env_path, override=True)

        # Update instance variable
        if provider.lower() == "openai":
            self.openai_api_key = api_key
        elif provider.lower() == "anthropic":
            self.anthropic_api_key = api_key
        elif provider.lower() == "huggingface":
            self.huggingface_api_key = api_key


# Global config instance
config = Config()
